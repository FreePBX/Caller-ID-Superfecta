<?php

/*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 
 * Growl Notification Module for CID Superfecta
 * (Written By Francois Dechery, aka Soif. https://github.com/soif/)
 * 
 * 
 * Licence: This program is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the Free Software 
 * Foundation; either version 2 of the License, or (at your option) any later version.
 * 
 * Version History:
 * 		2012-11-20	- Initial Release by soif
 * 		2014-01-25	- Added support for callback URL by lgaetz
 * 		2014-09-30	- Added support for CID, DID and CNAM to be substituted into URL
 * 		2014-11-12	- Add check for mbstring extensions
 * 		2014-12-15	- Faster Notification (Ping hosts before sending Notification) + Nicest Debug ; by Soif
 * 
 * 
 *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***/

class Send_to_Growl extends superfecta_base {

	public $description = "This source will send the number and the Caller ID to multiple computers.<br> This datasource should be one of the last data sources on your list, as it does not provide any data of its own, and can only send what information has been collected before it is run.";
	public $version_requirement = "2.11";
	public $source_param = array(
		'Hosts' => array(
			'description' => 'Specify the IPs of hosts to be notified (separated by ",")',
			'type' => 'text',
			'default' => '10.0.0.1'
		),
		'Display_Setting' => array(
			'description' => 'Number Format',
			'type' => 'select',
			'option' => array(
				'1' => '(132) 456-7890',
				'2' => '12 34 56 78 90',
				'3' => 'no formatting'
			),
			'default' => '3'
		),
		'Mode' => array(
			'description' => 'Growl Protocol',
			'type' => 'select',
			'option' => array(
				'udp'	=> 'Udp (MacOSX only )',
				'gntp'	=> 'Gntp (MacOSX >=10.7 , Windows )',
				'both'	=>	'Both'
			),
			'default' => 'udp'
		),
		'Priority' => array(
			'description' => 'Priority Level',
			'type' => 'select',
			'option' => array(
				'-2'	=> 'Low',
				'-1'	=> 'Moderate',
				'0'		=> 'Normal',
				'1'		=> 'High',
				'2'		=> 'Emergency'
			),
			'default' => '1'
		),
		'Sticky' => array(
			'description' => 'aaa',
			'type' => 'select',
			'option' => array( 
				'0'		=> 'No',
				'1'		=> 'Yes',
			),
			'default' => '0'
		),
		'Application' => array(
			'description'	=> 'Application Name',
			'type'			=> 'text',
			'default'		=> 'Pbx Notification'
		),
		'Password' => array(
			'description'	=> 'Password',
			'type'			=> 'password',
			'default'		=> ''
		),
		'Callback_URL' => array(
            'description'    => 'Allows user to click the notification box and open the URL specified here. Use the text ":cid:" to substitute the CallerID number, ":did:" for the DID and ":cnam:" for the Caller ID name.',
			'type'			=> 'text',
			'default'		=> null,
		),
		'Timemout' => array(
			'description'	=> 'Maximum time (in seconds) to wait for a host to answer, before giving up.',
			'type'			=> 'text',
			'default'		=> '1'
		),
	);

	// -------------------------------------------------------------------------------------------------
	function __construct() {
		require_once(dirname(dirname(__FILE__)) . "/includes/pear/Net/Growl/Autoload.php");
	}


	// -------------------------------------------------------------------------------------------------
	function post_processing($cache_found, $winning_source, $first_caller_id, $run_param, $thenumber) {

		// check for mbstring extensions and exit if absent to prevent crashing system
		if (!extension_loaded('mbstring')) {
			$this->DebugPrint("The Send to Growl module requires PHP mbstring extensions...skipping.");
			return;
		}

		$growl_start_time=$this->mctime_float();

		if (($run_param['Hosts'] !='') ){
			// format numbers --------------
			$thenumberformated = $thenumber;
			$the_did_formated =$this->get_DID();

			switch ($run_param['Display_Setting']){
				case 1:
					if (strlen($thenumber)==10){
						$thenumberformated	='('.substr($thenumber,0,3).') '.substr($thenumber,3,3).'-'.substr($thenumber,6,4);
					}	
					if (strlen($the_did_formated)==10){
						$the_did_formated	='('.substr($the_did_formated,0,3).') '.substr($the_did_formated,3,3).'-'.substr($the_did_formated,6,4);
					}
					break;
				case 2:
					if (strlen($thenumber)==10){
						$thenumberformated=substr($thenumber,0,2).' '.substr($thenumber,2,2).' '.substr($thenumber,4,2).' '.substr($thenumber,6,2).' '.substr($thenumber,8,2);
					}
					if (strlen($the_did_formated)==10){
						$the_did_formated	=substr($the_did_formated,0,2).' '.substr($the_did_formated,2,2).' '.substr($the_did_formated,4,2).' '.substr($the_did_formated,6,2).' '.substr($the_did_formated,8,2);
					}	
					break;
			}

				
			//Growl it -----------------------------
			$growl_params['app_name']			= $run_param['Application'];
			$growl_params['app_password']		= $run_param['Password'];			
			$growl_params['notif_messages']		="Messages";
			$growl_params['app_notifications']	= array($growl_params['notif_messages']);

			$growl_mode 						= $run_param['Mode'];
			$growl_params['app_options']  		= array(
					'protocol'		=> $growl_mode, 
					'timeout'		=> intval($run_param['Timemout']),
				//	optionally (in Gntp Mode) you might include an icon from a local path or remote URL.
				//	'AppIcon'  		=> 'http://www.laurent-laville.org/growl/images/Help.png',
			);

			$growl_params['mess_title']		="Line: $the_did_formated";
			$growl_params['mess_content']	=htmlspecialchars($first_caller_id) . "\n$thenumberformated";	

			$growl_params['mess_options']	 = array(
				'priority' 				=> $run_param['Priority'],
				'sticky' 				=> (bool) $run_param['Sticky'],
				'CallbackContext' 		=> 'context',  // no idea what is supposed to be here - lgaetz
				'CallbackContextType'	=> 'STRING'
			);

			// only set callbacktarget if $url is populated, otherwise clicking on growl notice causes 'unknown url' error
			if ($run_param['Callback_URL']) {
				$url = str_replace(":cid:",urlencode($thenumber), $run_param['Callback_URL']);
				$url = str_replace(":cnam:",urlencode($first_caller_id), $url);
				$url = str_replace(":did:",urlencode($the_did_formated), $url);
				//$this->DebugPrint("Growl callback URL: $url");

				$growl_params['mess_options']['CallbackTarget'] = $url;
			}

			// for each hosts --------------------
			$this->DebugPrint('Sending Growl Notifications: <ul>');

			$growl_hosts=explode(',',$run_param['Hosts']);
			foreach ( $growl_hosts as $growl_host ){
				if($growl_host	=trim($growl_host)){
					$growl_params['app_options']['host']=$growl_host;
										
					// first run ----------------------------
					if($growl_mode=='both'){
						$growl_params['app_options']['protocol']='udp';
					}					
					
					$this->_SendGrowNotification($growl_params);

					//(mode=both) do it again baby ------------------- 
					if($growl_mode=='both'){
						$growl_params['app_options']['protocol']='gntp';
						$this->_SendGrowNotification($growl_params);
					}
				}
			}
			$this->DebugPrint(" </ul>Total time spent by module Send_To_Growl :  ".$this->_GetExeTimeSince($growl_start_time)." to notify all hosts.<br>\n", DEBUG_INFO);
		}
		return($thenumber);
	}
	
	// -------------------------------------------------------------------------------------------------
	private function _GetExeTimeSince($time){
		return number_format(($this->mctime_float()-$time),4). " seconds";
	}
	

	// -------------------------------------------------------------------------------------------------
	private function _SendGrowNotification($params,$ping_timeout=0.1){
		$this->DebugEcho(" - <b>{$params['app_options']['protocol']}</b> to {$params['app_options']['host']} : ",DEBUG_INFO);
		if($ping_timeout and !$this->_VerifyHostCanBeReached($params['app_options']['host'],$params['app_options']['protocol'],$ping_timeout)){
			$this->DebugPrint("	... CANCELED! Can't be reached in $ping_timeout seconds.");
			return;
		}
		$host_start_time=$this->mctime_float();				
		$growl_do_register = true;
		try {
			$growl = Net_Growl::singleton($params['app_name'], $params['app_notifications'], $params['app_password'], $params['app_options']);
			$growl_do_register and $growl->register();	
			$growl->publish( $params['notif_messages'], $params['mess_title'], $params['mess_content'], $params['mess_options']);
			$growl->reset();
			$this->DebugEcho("	... OK!");
		}
		catch (Net_Growl_Exception $e) {
			$growl->reset();
			$this->DebugEcho("	... ERROR= ".$e->getMessage());
		}
		$this->DebugPrint(" <i>(Processed in ".$this->_GetExeTimeSince($host_start_time).")</i>",DEBUG_INFO);
	}


	// -------------------------------------------------------------------------------------------------
	private function _VerifyHostCanBeReached($host,$growl_mode='udp',$timeout=0.1){
		if($growl_mode=='udp'){
			// we need a reliable FAST udp pinger
			/* 
			if($fp = fsockopen("udp://$host", 9887, $errno, $errstr, $timeout)){
				list($s,$trash)=explode('.',$timeout);
				$ms	=round( ($timeout - $s) * 1000000);
				//$this->DebugEcho(" [ $s , $ms ] ");
				socket_set_timeout($fp,$s,$ms);
				if($write = fwrite($fp,"x00") ){
					$startTime = $this->mctime_float();
					$r=fread($fp, 1);
					$endTime = $this->mctime_float();
					$timeDiff = $endTime - $startTime;
					$this->DebugEcho(" [ $timeDiff ] ");
					fclose($fp);
					if ($timeDiff >= $timeout) {
						return true;
					}				
				}
				fclose($fp);
			}
			*/
			
			return true;
		}
		elseif($growl_mode=='gntp'){
			if($fp = fsockopen("$host", 23053, $errno, $errstr, $timeout)){
				fclose($fp);
				return true;
			}
		}
		return false;		
	}
}